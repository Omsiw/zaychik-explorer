import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

const SERVER_URL = 'http://localhost:8080/ws';

const SERVER_URL_WS = 'ws://localhost:8080/ws'

class SocketService {
    stompClient;
    subscriptions = new Map();

    connect(onConnectedCallback) {
        if (this.stompClient && this.stompClient.active) {
            console.log('–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.');
            if (onConnectedCallback) onConnectedCallback();
            return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
            console.error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
            return;
        }

        this.stompClient = new Client({
            // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π URL –¥–ª—è —á–∏—Å—Ç–æ–≥–æ WebSocket
            brokerURL: SERVER_URL_WS,
            // webSocketFactory –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            connectHeaders: {
                Authorization: `Bearer ${token}`,
            },

            // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug: (str) => {
                console.log('STOMP DEBUG: ' + str);
            },
            
            reconnectDelay: 5000,
        });

        // // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        // this.stompClient = new Client({
        //     // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ URL, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é,
        //     // –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SockJS-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—ä–µ–∫—Ç.
        //     webSocketFactory: () => new SockJS(SERVER_URL),

        //     // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        //     connectHeaders: {
        //         Authorization: `Bearer ${token}`,
        //     },

        //     // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        //     debug: (str) => {
        //         console.log('STOMP DEBUG: ' + str);
        //     },

        //     // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        //     reconnectDelay: 5000,
        // });

        // –ö–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.stompClient.onConnect = (frame) => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ' + frame);
            if (onConnectedCallback) {
                onConnectedCallback();
            }
        };

        // –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ STOMP (—Ç–µ–ø–µ—Ä—å –º—ã —É–≤–∏–¥–∏–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
        this.stompClient.onStompError = (frame) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ STOMP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: ' + frame.headers['message']);
            console.error('–î–µ—Ç–∞–ª–∏: ' + frame.body);
        };
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç. –û–Ω –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.
        this.stompClient.activate();
    }

    disconnect() {
        if (this.stompClient && this.stompClient.active) {
            this.stompClient.deactivate();
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.');
            this.subscriptions.clear();
        }
    }

    subscribe(topic, onMessageReceived) {
        if (!this.stompClient || !this.stompClient.active) {
            console.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
            return;
        }
        
        const subscription = this.stompClient.subscribe(topic, (message) => {
            onMessageReceived(JSON.parse(message.body));
        });
        
        this.subscriptions.set(topic, subscription);
        console.log(`üëÇ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${topic}`);
    }

    // –ú–µ—Ç–æ–¥ sendMessage —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è publish –≤ –Ω–æ–≤–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    sendMessage(destination, body) {
        if (this.stompClient && this.stompClient.active) {
            this.stompClient.publish({
                destination: destination,
                body: JSON.stringify(body)
            });
        } else {
            console.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        }
    }
}

export const socketService = new SocketService();